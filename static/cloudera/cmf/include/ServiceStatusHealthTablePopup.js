// (c) Copyright 2012 Cloudera, Inc. All rights reserved.
define([
  'cloudera/cmf/include/RoleInstancesTable',
  'cloudera/cmf/include/HealthAndIcon',
  'cloudera/health/HealthUtil',
  'knockout',
  'underscore'
], function(RoleInstancesTable, HealthAndIcon, HealthUtil, ko, _) {

  var HealthCheckResult = function(healthCheckSummary) {
    var self = this;

    var healthAndIconOptions = {
      'health': healthCheckSummary.health,
      'roleCount': healthCheckSummary.roles.length,
      'showIcon': false
    };
    self.html = HealthAndIcon.render(healthAndIconOptions);
    self.hostNames = _.pluck(healthCheckSummary.roles, 'name');
  };

  // Structure from the server, generated by RoleInstanceJSONGenerator.java:
  // * longDisplayName: Health check description suitable for display.
  // * shortDisplayName: Health check name suitable for display.
  // * summary: Object:
  //   * <CHECK_SEVERITY>: Object:
  //     * health: Object:
  //       * tag: text id of health
  //       * text: Label suitable for display.
  //     * roles: Array of objects:
  //       * id: id of host.
  //       * name: name of host
  // ...where the key CHECK_SEVERITY is one of RED, YELLOW, GREEN, etc...
  var HealthCheck = function(serverHealthCheck) {
    var self = this;

    self.displayName = serverHealthCheck.shortDisplayName;
    self.description = serverHealthCheck.longDisplayName;

    // Gather the stats into a single HTML string.
    var stats = [];
    _.each(HealthUtil.severityDisplayOrder, function(severityName) {
      var stat = serverHealthCheck.summary[severityName];
      if (stat) {
        stats.push(new HealthCheckResult(stat));
      }
    });
    self.stats = stats;
  };

  // Filters the healthSummary object, passed in from the server, so that
  // it only contains information about hosts that we care about. The
  // allowedHostNames object has keys corresponding to host names and is
  // used as a quick lookup.
  var filterHealthSummary = function(healthSummary, allowedHostNames) {
    _.each(healthSummary, function(healthCheckData, checkKey) {
      // The summary field of the healthCheckData contains information
      // about the state of this health check, keyed by health
      // check state.
      _.each(healthCheckData.summary, function(healthCheckResult, resultKey) {
        // Filter for hosts that we care about.
        healthCheckResult.roles = _.filter(healthCheckResult.roles, function(roleInfo) {
          // The name property here is the hostname for this role.
          // See RoleInstanceJSONGenerator::writeRoleHealthDetails.
          return allowedHostNames.hasOwnProperty(roleInfo.name);
        });
        // If a given health check has no entries in the allowed list of hosts,
        // do not show that health check or its list of filter links.
        if (healthCheckResult.roles.length === 0) {
          delete healthCheckData.summary[resultKey];
        }
      });
      // If a health check's summary is empty, we should delete the
      // check from the top-level health check data.
      if (_.size(healthCheckData.summary) === 0) {
        delete healthSummary[checkKey];
      }
    });
    return healthSummary;
  };

  // Helps to display service status health in a popup.
  // Options:
  //    roles: JSON data about the roles, passed directly to RoleInstancesTable
  //    healthTestSummary: JSON data about service health (required)
  //    checkboxes: Display checkboxes, true|false.
  //    filter: Filter based on URL params? true|false
  //    showRacks: Show rack info true|false
  //    pageLength: Number, defaults to 25
  var ServiceStatusHealthTablePopup = function(options) {
    var self = this;

    // options.roles contains the list of hosts that we're displaying
    // in this popup. Change it to an object for faster lookup in the
    // filtering code.
    var allowedHostNames = {};
    _.each(options.roles, function(role) {
      allowedHostNames[role.host.hostName] = true;
    });

    // Filter the self.healthSummary so it only contains information about
    // the roles that we're displaying in the popup.
    self.healthSummary = filterHealthSummary(options.healthTestSummary, allowedHostNames);

    // Instantiate the role instances table. The options for this control
    // and the RoleInstancesTable purposefully overlap to make this possible.
    self.roleInstancesTable = new RoleInstancesTable(options);

    // Contains the HealthCheckResult instance that we're currently
    // filtering the list with; null if none.
    self.currentHealthCheckFilter = ko.observable(null);

    // Called by Knockout, returns a list of objects that look like this:
    //    name: Name of a health check
    //    stats: Breakdown of how many roles are reporting what (e.g. "42 concerning, 1 Green", etc.)
    self.getSummary = function() {
      return _.map(self.healthSummary, function(healthCheck) {
        return new HealthCheck(healthCheck);
      });
    };

    self.filterByHealthCheckRoles = function(healthCheckResult) {
      // Make fast lookup map of roles for the passed in healthCheckResult.
      var roleLookup = {};
      _.each(healthCheckResult.hostNames, function(hostName) {
        roleLookup[hostName] = true;
      });
      self.roleInstancesTable.setFilterFunc(function(rowData) {
        var hostName = self.roleInstancesTable.getHostName(rowData);
        // Be forgiving... if a hostname isn't present, show the row.
        if (!hostName) {
          return true;
        }
        return roleLookup.hasOwnProperty(hostName);
      });
      self.roleInstancesTable.redrawTable();
      self.currentHealthCheckFilter(healthCheckResult);
    };

    self.removeFilter = function() {
      self.roleInstancesTable.clearFilterFunc();
      self.roleInstancesTable.redrawTable();
      self.currentHealthCheckFilter(null);
    };
    
    // Set the title, if we got one in options.
    if (options.title) {
      $('.modal-header h3').text(options.title);
    }

    // Get Knockout to do its thing.
    ko.applyBindings(self, $('#serviceStatusHealthTablePopup')[0]);
  };

  // Expose the inner classes and methods for testing.
  ServiceStatusHealthTablePopup.HealthCheck = HealthCheck;
  ServiceStatusHealthTablePopup.HealthCheckResult = HealthCheckResult;
  ServiceStatusHealthTablePopup.filterHealthSummary = filterHealthSummary;

  return ServiceStatusHealthTablePopup;
});
